function gpops2_template(filename, options)
%{

    This function was written by Chenxi Ding, in Harbin, China, in 2024/12.
    It generates a template file to run GPOPS-II, a general optimal control
    toolbox. If you think the function is useful for you, please star my
    GitHub project.

%}
if nargin == 0
    filename = "GPOPS2TEMPLATE.m";
    options = gpops2_set;
elseif nargin == 1
    options = gpops2_set;
end

if ~isstring(filename) && ~ischar(filename)
    error("The first input argument must be a string or a char array.")
end

if isempty(options)
     error("The second input argument must be a struct generated by gpops2_set.");
end

if ~isempty(options) && ~isa(options,'struct')
    error("The second input argument must be a struct generated by gpops2_set.")
end

check_options(options);

currentTime = datestr(now, 'yyyy-mm-dd HH:MM:SS');

% content of the template
templateContent = ...
    "%%{ \n" +...
    "\tThis file is generated at " + currentTime + ".\n" +...
    "\tThis script is a template file of the " +... 
    "optimal control toolbox GPOPS2.\n" + ...
    "%%} \n" + ...
    "%% Here you can set the bounds of the problem\n" +...
    "bounds.phase.initialtime.lower = ; %% scalar\n" + ... 
    "bounds.phase.initialtime.upper = ; %% scalar\n" + ...
    "bounds.phase.finaltime.lower = ; %% scalar\n" + ...
    "bounds.phase.finaltime.upper = ; %% scalar\n" + ...
    "bounds.phase.initialstate.lower = ; %% row\n" + ...
    "bounds.phase.initialstate.upper = ; %% row\n" + ...
    "bounds.phase.state.lower = ; %% row\n" + ...
    "bounds.phase.state.upper = ; %% row\n" + ...
    "bounds.phase.finalstate.lower = ; %% row\n" + ...
    "bounds.phase.finalstate.upper = ; %% row\n" + ...
    "bounds.phase.control.lower = ; %% row\n" + ...
    "bounds.phase.control.upper = ; %% row\n\n";

if strcmp(options.integral, 'off')
    templateContent = templateContent + ...
    "%% If you need integral, event or path, comment out\n" +...
    "%% bounds.phase.integral.lower = ; %% row\n" +...
    "%% bounds.phase.integral.upper = ; %% row\n";
else
    templateContent = templateContent + ...
    "%% If you need integral, event or path, comment out\n" +...
    "bounds.phase.integral.lower = ; %% row\n" +...
    "bounds.phase.integral.upper = ; %% row\n";
end
if strcmp(options.path, 'off')
    templateContent = templateContent + ...
    "%% bounds.phase.path.lower = ; %% row\n" +...
    "%% bounds.phase.path.upper = ; %% row\n";
else
    templateContent = templateContent + ...
    "bounds.phase.path.lower = ; %% row\n" +...
    "bounds.phase.path.upper = ; %% row\n";
end
if strcmp(options.event, 'off')
    templateContent = templateContent + ...
    "%% bounds.eventgroup.lower = []; %% row\n" +...
    "%% bounds.eventgroup.upper = []; %% row\n\n";
else
    templateContent = templateContent + ...
    "bounds.eventgroup.lower = []; %% row\n" +...
    "bounds.eventgroup.upper = []; %% row\n\n";
end

templateContent = templateContent + ...
    "%% Here you can set the guess of the problem\n" +...
    "guess.phase.state = [];\n" + ...
    "guess.phase.control = [];\n" + ...
    "guess.phase.time = []; %% column\n";

if strcmp(options.integral, 'off')
    templateContent = templateContent + ...
        "%% guess.phase.integral = ;\n\n";
else
    templateContent = templateContent + ...
        "guess.phase.integral = ;\n\n";
end

    templateContent = templateContent + ...
    "meshphase.colpoints = 4 * ones(1,10);\n" + ...
    "meshphase.fraction = 0.1 * ones(1,10);\n" + ...
    "setup.name = \'" + options.probname + "Problem\';\n" +...
    "setup.functions.continuous = @" + options.probname + "Continuous;\n" + ...
    "setup.functions.endpoint = @" + options.probname + "Endpoint;\n" + ...
    "setup.auxdata = auxdata;\n" + ...
    "setup.mesh.phase = meshphase;\n" + ...
    "setup.bounds = bounds;\n" + ...
    "setup.guess = guess;\n" + ...
    "setup.nlp.solver = \'" + options.solver + "\';\n" + ...
    "setup.derivatives.supplier = \'" + options.supplier + "\';\n" + ...
    "setup.derivatives.derivativelevel = \'" + options.derivativelevel + "\';\n" + ...
    "setup.scales.method = \'" + options.scales +  "\';\n" + ...
    "setup.method = \'RPMintegration\';\n" + ...
    "setup.mesh.method = \'" + options.meshmethod + "\';\n" + ...
    "setup.mesh.tolerance = " + num2str(options.tolerance, '%.1e') +";\n" + ...
    "setup.mesh.colpointsmin = 4;\n" + ...
    "setup.mesh.colpointsmax = 10;\n\n" + ...
    ...
    "output = gpops2(setup);\n" + ...
    "%% time = output.result.solution.time;\n" + ...
    "%% state = output.result.solution.state;\n" + ...
    "%% control = output.result.solution.control;\n" + ...
    "%% objective = output.result.solution.objective;\n\n" + ...
    ...
    "function phaseout = " + options.probname + "Continuous(input)\n" + ...
    "x1 = input.phase.state(:, 1); %% column\n" + ...
    "p = input.auxdata.p;\n\n" + ...
    ...
    "%% Remember to use element-wise operation to calculate dynamics derivatives\n" + ...
    "phaseout.dynamics = [];\n";
if strcmp(options.integral, 'off')
    templateContent = templateContent + ...
        "%% phaseout.integrand = ;\n";
else
    templateContent = templateContent + ...
        "phaseout.integrand = ;\n";
end
if strcmp(options.path, 'off')
    templateContent = templateContent + ...
        "%% phaseout.path = ;\n";
else
    templateContent = templateContent + ...
        "phaseout.path = ;\n";
end


templateContent = templateContent + ...
    "end\n\n" + ...
    ...
    "function output = " + options.probname + "Endpoint(input)\n" + ...
    "%% = input.phase.initialstate;\n" + ...
    "%% = input.phase.finalstate;\n" + ...
    "%% = input.phase.initialtime;\n" + ...
    "%% = input.phase.finaltime;\n";

if strcmp(options.integral, 'off')
    templateContent = templateContent + ...
        "%% = input.phase.integral;\n" + ...
        "%% p = input.auxdata.p;\n" + ...
        "output.objective = ;\n";
else
    templateContent = templateContent + ...
        " = input.phase.integral;\n" + ...
        "%% p = input.auxdata.p;\n" + ...
        "output.objective = ;\n";
end

if strcmp(options.event, 'off')
    templateContent = templateContent + ...
        "%% output.eventgroup.event = ;\n";
else
    templateContent = templateContent + ...
        "output.eventgroup.event = ;\n";
end

templateContent = templateContent + ...
    "end";


fileID = fopen(filename, 'w'); 
 
if fileID == -1
    error('Cannot open the file!');
end
 
fprintf(fileID, templateContent);

% close the file
fclose(fileID);
 
fprintf("The template file of GPOPS2--" + filename + "--has been successfully generated.\n");

end